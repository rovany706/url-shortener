// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/delete_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/delete_service.go -destination=internal/service/mock/delete_service.go -package mock DeleteService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/rovany706/url-shortener/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDeleteService is a mock of DeleteService interface.
type MockDeleteService struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteServiceMockRecorder
	isgomock struct{}
}

// MockDeleteServiceMockRecorder is the mock recorder for MockDeleteService.
type MockDeleteServiceMockRecorder struct {
	mock *MockDeleteService
}

// NewMockDeleteService creates a new mock instance.
func NewMockDeleteService(ctrl *gomock.Controller) *MockDeleteService {
	mock := &MockDeleteService{ctrl: ctrl}
	mock.recorder = &MockDeleteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteService) EXPECT() *MockDeleteServiceMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockDeleteService) Put(deleteChan chan models.UserDeleteRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", deleteChan)
}

// Put indicates an expected call of Put.
func (mr *MockDeleteServiceMockRecorder) Put(deleteChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeleteService)(nil).Put), deleteChan)
}

// StartWorker mocks base method.
func (m *MockDeleteService) StartWorker(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWorker", arg0)
}

// StartWorker indicates an expected call of StartWorker.
func (mr *MockDeleteServiceMockRecorder) StartWorker(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorker", reflect.TypeOf((*MockDeleteService)(nil).StartWorker), arg0)
}
