// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/repository/mock/repository.go -package mock Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/rovany706/url-shortener/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// GetFullURL mocks base method.
func (m *MockRepository) GetFullURL(ctx context.Context, shortID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", ctx, shortID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockRepositoryMockRecorder) GetFullURL(ctx, shortID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockRepository)(nil).GetFullURL), ctx, shortID)
}

// GetNewUserID mocks base method.
func (m *MockRepository) GetNewUserID(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewUserID", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewUserID indicates an expected call of GetNewUserID.
func (mr *MockRepositoryMockRecorder) GetNewUserID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewUserID", reflect.TypeOf((*MockRepository)(nil).GetNewUserID), ctx)
}

// GetShortID mocks base method.
func (m *MockRepository) GetShortID(ctx context.Context, fullURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortID", ctx, fullURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortID indicates an expected call of GetShortID.
func (mr *MockRepositoryMockRecorder) GetShortID(ctx, fullURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortID", reflect.TypeOf((*MockRepository)(nil).GetShortID), ctx, fullURL)
}

// GetUserEntries mocks base method.
func (m *MockRepository) GetUserEntries(ctx context.Context, userID int) (repository.ShortIDMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEntries", ctx, userID)
	ret0, _ := ret[0].(repository.ShortIDMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEntries indicates an expected call of GetUserEntries.
func (mr *MockRepositoryMockRecorder) GetUserEntries(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEntries", reflect.TypeOf((*MockRepository)(nil).GetUserEntries), ctx, userID)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}

// SaveEntries mocks base method.
func (m *MockRepository) SaveEntries(ctx context.Context, userID int, shortIDMap repository.ShortIDMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntries", ctx, userID, shortIDMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntries indicates an expected call of SaveEntries.
func (mr *MockRepositoryMockRecorder) SaveEntries(ctx, userID, shortIDMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntries", reflect.TypeOf((*MockRepository)(nil).SaveEntries), ctx, userID, shortIDMap)
}

// SaveEntry mocks base method.
func (m *MockRepository) SaveEntry(ctx context.Context, userID int, shortID, fullURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntry", ctx, userID, shortID, fullURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEntry indicates an expected call of SaveEntry.
func (mr *MockRepositoryMockRecorder) SaveEntry(ctx, userID, shortID, fullURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntry", reflect.TypeOf((*MockRepository)(nil).SaveEntry), ctx, userID, shortID, fullURL)
}
